This project is a dance game. At the beginning of the game, the player may choose from four different animated sprite characters, each of which represents a game difficulty. The point of the game is for the player to keep their character dancing to the music by pressing the correct letters as they scroll down the screen. If the player presses the correct buttons, their score increases and the animation continues. If they don't, their score decrease and the animation stops. If the players score reaches zero, they lose and the game ends. Otherwise, play continues until the song finishes, and they player gets to see their final score. At any point during play, the player may pause the game, at which point the music pauses. From the pause screen, the player may choose to unpause and continue playing or exit the game. 

Dennis worked on the music and key press interactivity of the game play. Using Minim’s BeatDetection and BeatListener, Dennis has randomly chosen letters drop on the beat of the song that is playing. If the letter/s reaches the circle and the user presses the correct key, the circle will flash green, the letter will disappear, and points are added to the score. If the incorrect key is pressed or the letter has not reached the circle, a red circle will flash in the location of the key the user incorrectly pressed. Dennis built this by using a letter class. Each time that the BeatDetector found a beat, a letter object would be created with a random letter value and added to an ArrayList of Letters that begin to drop down the screen toward the circles. Once the object reaches the circle and is correctly key pressed, the object is removed from the ArrayList. If the letter object is not key pressed and goes past the circle it will also be removed. By using Minim and AudioPlayer, the program is able to pause the song and playback at the same spot. 

Chris was responsible for the score and timer classes, and for the basic structure of the game class and keyPressed, including the creation of game states, the game clock, pause screen, and score display. 

Jacob was responsible for the Animation class, the display of the sprites, the starting and stopping of the sprites on right and wrong notes, and the init screen.

We sourced code from 6.2 Beat Detection by Sean Gillespie from here: https://www.openprocessing.org/sketch/21434